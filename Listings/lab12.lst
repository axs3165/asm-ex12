


ARM Macro Assembler    Page 1 Embedded LED Game Functions and Drivers


    1 00000000                 TTL              Embedded LED Game Functions and Drivers
    2 00000000         ;****************************************************************
    3 00000000         ; Serial I/O driver with queue operations and ISR support,
    4 00000000         ; PIT driver for pseudorandom number generation,
    5 00000000         ; For use by C LED game embedded program
    6 00000000         ;Name:  Paul Kelly
    7 00000000         ;Date:  11-13-2018
    8 00000000         ;Class:  CMPE-250
    9 00000000         ;Section: 01 Tues. 1100-1250
   10 00000000         ;---------------------------------------------------------------
   11 00000000         ;Keil Template for KL46
   12 00000000         ;R. W. Melton
   13 00000000         ;February 5, 2018
   14 00000000         ;****************************************************************
   15 00000000         ;Assembler directives
   16 00000000                 THUMB
   17 00000000                 GBLL             MIXED_ASM_C
   18 00000000 TRUE     
                       MIXED_ASM_C
                               SETL             {TRUE}
   20 00000000         ;****************************************************************
   21 00000000         ;Include files
   22 00000000                 GET              MKL46Z4.s   ;Included by start.s
   24 00000000         ;****************************************************************
   25 00000000         ;EQUates
   26 00000000         ;****************************************************************
   27 00000000         ;---------------------------------------------------------------
   28 00000000         ;Characters
   29 00000000 0000000D 
                       CR      EQU              0x0D
   30 00000000 0000000A 
                       LF      EQU              0x0A
   31 00000000 00000008 
                       BS      EQU              0x08
   32 00000000 00000000 
                       NULL    EQU              0x00
   33 00000000 0000003A 
                       COLON   EQU              0x3A
   34 00000000 00000020 
                       SPA     EQU              0x20
   35 00000000 0000003E 
                       RIGHT   EQU              0x3E



ARM Macro Assembler    Page 2 Embedded LED Game Functions and Drivers


   36 00000000 0000003C 
                       LEFT    EQU              0x3C
   37 00000000         
   38 00000000         ; Queue
   39 00000000 00000012 
                       QRECSIZE
                               EQU              18
   40 00000000 00000004 
                       QBUFSIZE
                               EQU              4
   41 00000000         
   42 00000000 00000000 
                       IN_PTR  EQU              0
   43 00000000 00000004 
                       OUT_PTR EQU              4
   44 00000000 00000008 
                       BUF_STRT
                               EQU              8
   45 00000000 0000000C 
                       BUF_PAST
                               EQU              12
   46 00000000 00000010 
                       BUF_SIZE
                               EQU              16
   47 00000000 00000011 
                       NUM_ENQD
                               EQU              17
   48 00000000         
   49 00000000 000001F4 
                       FIVESEC EQU              500
   50 00000000         
   51 00000000         ;---------------------------------------------------------------
   52 00000000         ;PORTx_PCRn (Port x pin control register n [for pin n])
   53 00000000         ;___->10-08:Pin mux control (select 0 to 8)
   54 00000000         ;Use provided PORT_PCR_MUX_SELECT_2_MASK
   55 00000000         ;---------------------------------------------------------------
   56 00000000         ;Port A
   58 00000000 01000200 
                       PORT_PCR_SET_PTA1_UART0_RX
                               EQU              (PORT_PCR_ISF_MASK :OR:                                    PORT_PCR_MUX
_SELECT_2_MASK)
   60 00000000 01000200 



ARM Macro Assembler    Page 3 Embedded LED Game Functions and Drivers


                       PORT_PCR_SET_PTA2_UART0_TX
                               EQU              (PORT_PCR_ISF_MASK :OR:                                    PORT_PCR_MUX
_SELECT_2_MASK)
   61 00000000         ;---------------------------------------------------------------
   62 00000000         ;SIM_SCGC4
   63 00000000         ;1->10:UART0 clock gate control (enabled)
   64 00000000         ;Use provided SIM_SCGC4_UART0_MASK
   65 00000000         ;---------------------------------------------------------------
   66 00000000         ;SIM_SCGC5
   67 00000000         ;1->09:Port A clock gate control (enabled)
   68 00000000         ;Use provided SIM_SCGC5_PORTA_MASK
   69 00000000         ;---------------------------------------------------------------
   70 00000000         ;SIM_SOPT2
   71 00000000         ;01=27-26:UART0SRC=UART0 clock source select
   72 00000000         ;         (PLLFLLSEL determines MCGFLLCLK' or MCGPLLCLK/2)
   73 00000000         ; 1=   16:PLLFLLSEL=PLL/FLL clock select (MCGPLLCLK/2)
   75 00000000 04000000 
                       SIM_SOPT2_UART0SRC_MCGPLLCLK
                               EQU              (1 << SIM_SOPT2_UART0SRC_SHIFT)
   77 00000000 04010000 
                       SIM_SOPT2_UART0_MCGPLLCLK_DIV2
                               EQU              (SIM_SOPT2_UART0SRC_MCGPLLCLK :OR: SIM_SOPT2_PLLFLLSEL_MASK)
   78 00000000         ;---------------------------------------------------------------
   79 00000000         ;SIM_SOPT5
   80 00000000         ; 0->   16:UART0 open drain enable (disabled)
   81 00000000         ; 0->   02:UART0 receive data select (UART0_RX)
   82 00000000         ;00->01-00:UART0 transmit data select source (UART0_TX)
   86 00000000 00010007 
                       SIM_SOPT5_UART0_EXTERN_MASK_CLEAR
                               EQU              (SIM_SOPT5_UART0ODE_MASK :OR:                                  SIM_SOPT
5_UART0RXSRC_MASK :OR:                                  SIM_SOPT5_UART0TXSRC_MASK)
   87 00000000         ;---------------------------------------------------------------
   88 00000000         ;UART0_BDH
   89 00000000         ;    0->  7:LIN break detect IE (disabled)
   90 00000000         ;    0->  6:RxD input active edge IE (disabled)
   91 00000000         ;    0->  5:Stop bit number select (1)
   92 00000000         ;00001->4-0:SBR[12:0] (UART0CLK / [9600 * (OSR + 1)]) 
   93 00000000         ;UART0CLK is MCGPLLCLK/2
   94 00000000         ;MCGPLLCLK is 96 MHz
   95 00000000         ;MCGPLLCLK/2 is 48 MHz
   96 00000000         ;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
   97 00000000 00000001 



ARM Macro Assembler    Page 4 Embedded LED Game Functions and Drivers


                       UART0_BDH_9600
                               EQU              0x01
   98 00000000         ;---------------------------------------------------------------
   99 00000000         ;UART0_BDL
  100 00000000         ;0x38->7-0:SBR[7:0] (UART0CLK / [9600 * (OSR + 1)])
  101 00000000         ;UART0CLK is MCGPLLCLK/2
  102 00000000         ;MCGPLLCLK is 96 MHz
  103 00000000         ;MCGPLLCLK/2 is 48 MHz
  104 00000000         ;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
  105 00000000 00000038 
                       UART0_BDL_9600
                               EQU              0x38
  106 00000000         ;---------------------------------------------------------------
  107 00000000         ;UART0_C1
  108 00000000         ;0-->7:LOOPS=loops select (normal)
  109 00000000         ;0-->6:DOZEEN=doze enable (disabled)
  110 00000000         ;0-->5:RSRC=receiver source select (internal--no effect LOOPS=0)
  111 00000000         ;0-->4:M=9- or 8-bit mode select 
  112 00000000         ;        (1 start, 8 data [lsb first], 1 stop)
  113 00000000         ;0-->3:WAKE=receiver wakeup method select (idle)
  114 00000000         ;0-->2:IDLE=idle line type select (idle begins after start bit)
  115 00000000         ;0-->1:PE=parity enable (disabled)
  116 00000000         ;0-->0:PT=parity type (even parity--no effect PE=0)
  117 00000000 00000000 
                       UART0_C1_8N1
                               EQU              0x00
  118 00000000         ;---------------------------------------------------------------
  119 00000000         ;UART0_C2
  120 00000000         ;0-->7:TIE=transmit IE for TDRE (disabled)
  121 00000000         ;0-->6:TCIE=transmission complete IE for TC (disabled)
  122 00000000         ;0-->5:RIE=receiver IE for RDRF (disabled)
  123 00000000         ;0-->4:ILIE=idle line IE for IDLE (disabled)
  124 00000000         ;1-->3:TE=transmitter enable (enabled)
  125 00000000         ;1-->2:RE=receiver enable (enabled)
  126 00000000         ;0-->1:RWU=receiver wakeup control (normal)
  127 00000000         ;0-->0:SBK=send break (disabled, normal)
  128 00000000 0000000C 
                       UART0_C2_T_R
                               EQU              (UART0_C2_TE_MASK :OR: UART0_C2_RE_MASK)
  129 00000000 0000002C 
                       UART0_C2_T_RI
                               EQU              (UART0_C2_RIE_MASK :OR: UART0_C2_T_R)



ARM Macro Assembler    Page 5 Embedded LED Game Functions and Drivers


  130 00000000 000000AC 
                       UART0_C2_TI_RI
                               EQU              (UART0_C2_TIE_MASK :OR: UART0_C2_T_RI)
  131 00000000         ;---------------------------------------------------------------
  132 00000000         ;UART0_C3
  133 00000000         ;0-->7:R8T9=9th data bit for receiver (not used M=0)
  134 00000000         ;           10th data bit for transmitter (not used M10=0)
  135 00000000         ;0-->6:R9T8=9th data bit for transmitter (not used M=0)
  136 00000000         ;           10th data bit for receiver (not used M10=0)
  137 00000000         ;0-->5:TXDIR=UART_TX pin direction in single-wire mode
  138 00000000         ;            (no effect LOOPS=0)
  139 00000000         ;0-->4:TXINV=transmit data inversion (not inverted)
  140 00000000         ;0-->3:ORIE=overrun IE for OR (disabled)
  141 00000000         ;0-->2:NEIE=noise error IE for NF (disabled)
  142 00000000         ;0-->1:FEIE=framing error IE for FE (disabled)
  143 00000000         ;0-->0:PEIE=parity error IE for PF (disabled)
  144 00000000 00000000 
                       UART0_C3_NO_TXINV
                               EQU              0x00
  145 00000000         ;---------------------------------------------------------------
  146 00000000         ;UART0_C4
  147 00000000         ;    0-->  7:MAEN1=match address mode enable 1 (disabled)
  148 00000000         ;    0-->  6:MAEN2=match address mode enable 2 (disabled)
  149 00000000         ;    0-->  5:M10=10-bit mode select (not selected)
  150 00000000         ;01111-->4-0:OSR=over sampling ratio (16)
  151 00000000         ;               = 1 + OSR for 3 <= OSR <= 31
  152 00000000         ;               = 16 for 0 <= OSR <= 2 (invalid values)
  153 00000000 0000000F 
                       UART0_C4_OSR_16
                               EQU              0x0F
  154 00000000 0000000F 
                       UART0_C4_NO_MATCH_OSR_16
                               EQU              UART0_C4_OSR_16
  155 00000000         ;---------------------------------------------------------------
  156 00000000         ;UART0_C5
  157 00000000         ;  0-->  7:TDMAE=transmitter DMA enable (disabled)
  158 00000000         ;  0-->  6:Reserved; read-only; always 0
  159 00000000         ;  0-->  5:RDMAE=receiver full DMA enable (disabled)
  160 00000000         ;000-->4-2:Reserved; read-only; always 0
  161 00000000         ;  0-->  1:BOTHEDGE=both edge sampling (rising edge only)
  162 00000000         ;  0-->  0:RESYNCDIS=resynchronization disable (enabled)
  163 00000000 00000000 



ARM Macro Assembler    Page 6 Embedded LED Game Functions and Drivers


                       UART0_C5_NO_DMA_SSR_SYNC
                               EQU              0x00
  164 00000000         ;---------------------------------------------------------------
  165 00000000         ;UART0_S1
  166 00000000         ;0-->7:TDRE=transmit data register empty flag; read-only
  167 00000000         ;0-->6:TC=transmission complete flag; read-only
  168 00000000         ;0-->5:RDRF=receive data register full flag; read-only
  169 00000000         ;1-->4:IDLE=idle line flag; write 1 to clear (clear)
  170 00000000         ;1-->3:OR=receiver overrun flag; write 1 to clear (clear)
  171 00000000         ;1-->2:NF=noise flag; write 1 to clear (clear)
  172 00000000         ;1-->1:FE=framing error flag; write 1 to clear (clear)
  173 00000000         ;1-->0:PF=parity error flag; write 1 to clear (clear)
  178 00000000 0000001F 
                       UART0_S1_CLEAR_FLAGS
                               EQU              (UART0_S1_IDLE_MASK :OR:                              UART0_S1_OR_MASK 
:OR:                              UART0_S1_NF_MASK :OR:                              UART0_S1_FE_MASK :OR:           
                   UART0_S1_PF_MASK)
  179 00000000         ;---------------------------------------------------------------
  180 00000000         ;UART0_S2
  181 00000000         ;1-->7:LBKDIF=LIN break detect interrupt flag (clear)
  182 00000000         ;             write 1 to clear
  183 00000000         ;1-->6:RXEDGIF=RxD pin active edge interrupt flag (clear)
  184 00000000         ;              write 1 to clear
  185 00000000         ;0-->5:(reserved); read-only; always 0
  186 00000000         ;0-->4:RXINV=receive data inversion (disabled)
  187 00000000         ;0-->3:RWUID=receive wake-up idle detect
  188 00000000         ;0-->2:BRK13=break character generation length (10)
  189 00000000         ;0-->1:LBKDE=LIN break detect enable (disabled)
  190 00000000         ;0-->0:RAF=receiver active flag; read-only
  192 00000000 000000C0 
                       UART0_S2_NO_RXINV_BRK10_NO_LBKDETECT_CLEAR_FLAGS
                               EQU              (UART0_S2_LBKDIF_MASK :OR: UART0_S2_RXEDGIF_MASK)
  193 00000000         ;---------------------------------------------------------------
  194 00000000         ;NVIC_ICER
  195 00000000         ;31-00:CLRENA=masks for HW IRQ sources;
  196 00000000         ;             read:   0 = unmasked;   1 = masked
  197 00000000         ;             write:  0 = no effect;  1 = mask
  198 00000000         ;22:PIT IRQ mask
  199 00000000         ;12:UART0 IRQ mask
  200 00000000 00400000 
                       NVIC_ICER_PIT_MASK
                               EQU              PIT_IRQ_MASK



ARM Macro Assembler    Page 7 Embedded LED Game Functions and Drivers


  201 00000000 00001000 
                       NVIC_ICER_UART0_MASK
                               EQU              UART0_IRQ_MASK
  202 00000000         ;---------------------------------------------------------------
  203 00000000         ;NVIC_ICPR
  204 00000000         ;31-00:CLRPEND=pending status for HW IRQ sources;
  205 00000000         ;             read:   0 = not pending;  1 = pending
  206 00000000         ;             write:  0 = no effect;
  207 00000000         ;                     1 = change status to not pending
  208 00000000         ;22:PIT IRQ pending status
  209 00000000         ;12:UART0 IRQ pending status
  210 00000000 00400000 
                       NVIC_ICPR_PIT_MASK
                               EQU              PIT_IRQ_MASK
  211 00000000 00001000 
                       NVIC_ICPR_UART0_MASK
                               EQU              UART0_IRQ_MASK
  212 00000000         ;---------------------------------------------------------------
  213 00000000         ;NVIC_IPR0-NVIC_IPR7
  214 00000000         ;2-bit priority:  00 = highest; 11 = lowest
  215 00000000         ;--PIT
  216 00000000 00000000 
                       PIT_IRQ_PRIORITY
                               EQU              0
  217 00000000 00C00000 
                       NVIC_IPR_PIT_MASK
                               EQU              (3 << PIT_PRI_POS)
  218 00000000 00000000 
                       NVIC_IPR_PIT_PRI_0
                               EQU              (PIT_IRQ_PRIORITY << UART0_PRI_POS)
  219 00000000         ;--UART0
  220 00000000 00000003 
                       UART0_IRQ_PRIORITY
                               EQU              3
  221 00000000 000000C0 
                       NVIC_IPR_UART0_MASK
                               EQU              (3 << UART0_PRI_POS)
  222 00000000 000000C0 
                       NVIC_IPR_UART0_PRI_3
                               EQU              (UART0_IRQ_PRIORITY << UART0_PRI_POS)
  223 00000000         ;---------------------------------------------------------------
  224 00000000         ;NVIC_ISER



ARM Macro Assembler    Page 8 Embedded LED Game Functions and Drivers


  225 00000000         ;31-00:SETENA=masks for HW IRQ sources;
  226 00000000         ;             read:   0 = masked;     1 = unmasked
  227 00000000         ;             write:  0 = no effect;  1 = unmask
  228 00000000         ;22:PIT IRQ mask
  229 00000000         ;12:UART0 IRQ mask
  230 00000000 00400000 
                       NVIC_ISER_PIT_MASK
                               EQU              PIT_IRQ_MASK
  231 00000000 00001000 
                       NVIC_ISER_UART0_MASK
                               EQU              UART0_IRQ_MASK
  232 00000000         ;---------------------------------------------------------------
  233 00000000         ;PIT_LDVALn:  PIT load value register n
  234 00000000         ;31-00:TSV=timer start value (period in clock cycles - 1)
  235 00000000         ;Clock ticks for 0.01 s at 24 MHz count rate
  236 00000000         ;0.01 s * 24,000,000 Hz = 240,000
  237 00000000         ;TSV = 240,000 - 1
  238 00000000 0003A97F 
                       PIT_LDVAL_10ms
                               EQU              239999
  239 00000000         ;---------------------------------------------------------------
  240 00000000         ;PIT_MCR:  PIT module control register
  241 00000000         ;1-->    0:FRZ=freeze (continue'/stop in debug mode)
  242 00000000         ;0-->    1:MDIS=module disable (PIT section)
  243 00000000         ;               RTI timer not affected
  244 00000000         ;               must be enabled before any other PIT setup
  245 00000000 00000001 
                       PIT_MCR_EN_FRZ
                               EQU              PIT_MCR_FRZ_MASK
  246 00000000         ;---------------------------------------------------------------
  247 00000000         ;PIT_TCTRLn:  PIT timer control register n
  248 00000000         ;0-->   2:CHN=chain mode (enable)
  249 00000000         ;1-->   1:TIE=timer interrupt enable
  250 00000000         ;1-->   0:TEN=timer enable
  251 00000000 00000003 
                       PIT_TCTRL_CH_IE
                               EQU              (PIT_TCTRL_TEN_MASK :OR: PIT_TCTRL_TIE_MASK)
  252 00000000         ;---------------------------------------------------------------
  253 00000000         ; LED Port Connections
  254 00000000         ; Port D
  255 00000000 00000100 
                       PTD5_MUX_GPIO



ARM Macro Assembler    Page 9 Embedded LED Game Functions and Drivers


                               EQU              (1 << PORT_PCR_MUX_SHIFT)
  257 00000000 01000100 
                       SET_PTD5_GPIO
                               EQU              (PORT_PCR_ISF_MASK :OR:          PTD5_MUX_GPIO)
  258 00000000         ; Port E
  259 00000000 00000100 
                       PTE29_MUX_GPIO
                               EQU              (1 << PORT_PCR_MUX_SHIFT)
  261 00000000 01000100 
                       SET_PTE29_GPIO
                               EQU              (PORT_PCR_ISF_MASK :OR:          PTE29_MUX_GPIO)
  262 00000000         ;----------------------------------------------------------------        
  263 00000000         ; Useful EQUates for KL46Z LEDS
  264 00000000 0000001D 
                       POS_RED EQU              29
  265 00000000 00000005 
                       POS_GREEN
                               EQU              5
  266 00000000         
  267 00000000 20000000 
                       LED_RED_MASK
                               EQU              (1 << POS_RED)
  268 00000000 00000020 
                       LED_GREEN_MASK
                               EQU              (1 << POS_GREEN)
  269 00000000         
  270 00000000 00000020 
                       LED_PORTD_MASK
                               EQU              LED_GREEN_MASK
  271 00000000 20000000 
                       LED_PORTE_MASK
                               EQU              LED_RED_MASK
  272 00000000         
  273 00000000         
  274 00000000         ;Program
  275 00000000         ;C source will contain main ()
  276 00000000         ;Only subroutines and ISRs in this assembly source
  277 00000000                 AREA             MyCode,CODE,READONLY
  278 00000000         
  279 00000000                 EXPORT           GetChar
  280 00000000         ;EXPORT      GetStringSB
  281 00000000                 EXPORT           Init_UART0_IRQ



ARM Macro Assembler    Page 10 Embedded LED Game Functions and Drivers


  282 00000000                 EXPORT           Init_PIT_IRQ
  283 00000000                 EXPORT           Init_LED
  284 00000000                 EXPORT           PutChar
  285 00000000                 EXPORT           PutNumHex
  286 00000000                 EXPORT           PutNumUB
  287 00000000                 EXPORT           PutStringSB
  288 00000000         
  289 00000000                 EXPORT           PIT_IRQHandler
  290 00000000                 EXPORT           UART0_IRQHandler
  291 00000000         
  292 00000000         ;>>>>> begin subroutine code <<<<<
  293 00000000         
  294 00000000         ;****************************************************************
  295 00000000         ; StartTimer
  296 00000000         ;
  297 00000000         ; Init timer by setting RunStopWatch to 1 and reset Count to 0
  298 00000000         ;****************************************************************
  299 00000000 B403    StartTimer
                               PUSH             {R0, R1}
  300 00000002         
  301 00000002 48B3            LDR              R0, =Count
  302 00000004 2100            MOVS             R1, #0
  303 00000006 6001            STR              R1, [R0, #0]
  304 00000008         
  305 00000008 48B2            LDR              R0, =RunStopWatch
  306 0000000A 2101            MOVS             R1, #1
  307 0000000C 7001            STRB             R1, [R0, #0]
  308 0000000E         
  309 0000000E BC03            POP              {R0, R1}
  310 00000010         
  311 00000010 4770            BX               LR
  312 00000012         
  313 00000012         
  314 00000012         ;****************************************************************
  315 00000012         ; Init_LED
  316 00000012         ;
  317 00000012         ; Initialize the Green and Red LEDs through PORT D and E
  318 00000012         ;****************************************************************
  319 00000012 B407    Init_LED
                               PUSH             {R0-R2}
  320 00000014         
  321 00000014         ; Enable clock for ports D and E



ARM Macro Assembler    Page 11 Embedded LED Game Functions and Drivers


  322 00000014 48B0            LDR              R0, =SIM_SCGC5
  324 00000016 49B1            LDR              R1, =(SIM_SCGC5_PORTD_MASK :OR:          SIM_SCGC5_PORTE_MASK)
  325 00000018 6802            LDR              R2, [R0, #0]
  326 0000001A 430A            ORRS             R2, R2, R1
  327 0000001C 6002            STR              R2, [R0, #0]
  328 0000001E         
  329 0000001E         ; Select PORT E Pin 29 for GPIO to red LED
  330 0000001E 48B0            LDR              R0, =PORTE_BASE
  331 00000020 49B0            LDR              R1, =SET_PTE29_GPIO
  332 00000022 6741            STR              R1, [R0, #PORTE_PCR29_OFFSET]
  333 00000024         
  334 00000024         ; Select PORT D Pin 5 for GPIO to green LED
  335 00000024 48B0            LDR              R0, =PORTD_BASE
  336 00000026 49AF            LDR              R1, =SET_PTD5_GPIO
  337 00000028 6141            STR              R1, [R0, #PORTD_PCR5_OFFSET]
  338 0000002A         
  339 0000002A         ; Select data direction
  340 0000002A 48B0            LDR              R0, =FGPIOD_BASE
  341 0000002C 49B0            LDR              R1, =LED_PORTD_MASK
  342 0000002E 6141            STR              R1, [R0, #GPIO_PDDR_OFFSET]
  343 00000030         
  344 00000030 48B0            LDR              R0, =FGPIOE_BASE
  345 00000032 49B1            LDR              R1, =LED_PORTE_MASK
  346 00000034 6141            STR              R1, [R0, #GPIO_PDDR_OFFSET]
  347 00000036         
  348 00000036 BC07            POP              {R0-R2}
  349 00000038 4770            BX               LR
  350 0000003A         
  351 0000003A         
  352 0000003A         ;>>>>> below has been tested and is working <<<<<
  353 0000003A         ;****************************************************************
  354 0000003A         ;  Subroutine to initialize the PIT to generate
  355 0000003A         ; an interrupt every 0.01 s
  356 0000003A         ;
  357 0000003A         ; Timer LDVAL: 239,999 cycles (~0.01s)
  358 0000003A         ;
  359 0000003A         ; Init to highest priority 0
  360 0000003A         ;****************************************************************
  361 0000003A         Init_PIT_IRQ
                               PROC             {R0-R14}
  362 0000003A B672            CPSID            I
  363 0000003C B507            PUSH             {LR, R0-R2}



ARM Macro Assembler    Page 12 Embedded LED Game Functions and Drivers


  364 0000003E         
  365 0000003E         ; set SIM_CGC6 for PIT Clock Enabled
  366 0000003E 48AF            LDR              R0, =SIM_SCGC6
  367 00000040 49AF            LDR              R1, =SIM_SCGC6_PIT_MASK
  368 00000042 6802            LDR              R2, [R0, #0] ; load current SIM_SCGC6 value
  369 00000044 430A            ORRS             R2, R2, R1  ; set only PIT bit
  370 00000046 6002            STR              R2, [R0, #0] ; update value
  371 00000048         
  372 00000048         ; disable PIT timer 0 (PIT_TCTRL0)
  373 00000048 48AE            LDR              R0, =PIT_CH0_BASE
  374 0000004A 49AF            LDR              R1, =PIT_TCTRL_TEN_MASK
  375 0000004C 6882            LDR              R2, [R0, #PIT_TCTRL_OFFSET]
  376 0000004E 438A            BICS             R2, R2, R1
  377 00000050 6082            STR              R2, [R0, #PIT_TCTRL_OFFSET]
  378 00000052         
  379 00000052         ; set PIT IRQ priority to 0
  380 00000052 48AE            LDR              R0, =PIT_IPR
  381 00000054 49AE            LDR              R1, =(NVIC_IPR_PIT_MASK)
  382 00000056         ;LDR R3, =(PIT_IRQ_PRI << PIT_PRI_POS)
  383 00000056 6802            LDR              R2, [R0, #0]
  384 00000058 438A            BICS             R2, R2, R1
  385 0000005A         ;ORRS R2, R2, R3
  386 0000005A 6002            STR              R2, [R0, #0]
  387 0000005C         
  388 0000005C         ; clear any pending PIT interrupts
  389 0000005C 48A9            LDR              R0, =PIT_CH0_BASE
  390 0000005E 49AA            LDR              R1, =PIT_TFLG_TIF_MASK
  391 00000060 60C1            STR              R1, [R0, #PIT_TFLG_OFFSET]
  392 00000062         
  393 00000062         ; unmask PIT Interrupts
  394 00000062 48AC            LDR              R0, =NVIC_ISER
  395 00000064 49AC            LDR              R1, =PIT_IRQ_MASK
  396 00000066 6001            STR              R1, [R0, #0]
  397 00000068         
  398 00000068         ; enable PIT module
  399 00000068 48AC            LDR              R0, =PIT_BASE
  400 0000006A 49A7            LDR              R1, =PIT_MCR_EN_FRZ ; enable FRZ to stop timer in debug
  401 0000006C 6001            STR              R1, [R0, #PIT_MCR_OFFSET]
  402 0000006E         
  403 0000006E         ; request interrupts for every 0.01 seconds
  404 0000006E 48A5            LDR              R0, =PIT_CH0_BASE
  405 00000070 49AB            LDR              R1, =PIT_LDVAL_10ms



ARM Macro Assembler    Page 13 Embedded LED Game Functions and Drivers


  406 00000072 6001            STR              R1, [R0, #PIT_LDVAL_OFFSET]
  407 00000074         
  408 00000074         ; enable PIT timer ch 0 for interrupts
  409 00000074 48A3            LDR              R0, =PIT_CH0_BASE
  410 00000076 2103            MOVS             R1, #PIT_TCTRL_CH_IE
  411 00000078 6081            STR              R1, [R0, #PIT_TCTRL_OFFSET]
  412 0000007A         
  413 0000007A B662            CPSIE            I
  414 0000007C BD07            POP              {R0-R2, PC}
  415 0000007E                 ENDP
  416 0000007E         
  417 0000007E         ;****************************************************************
  418 0000007E         ;    PIT_ISR subroutine
  419 0000007E         ;    Interrupt Service Routine for PIT driver
  420 0000007E         ;  
  421 0000007E         ; On interrupt, while RunStopWatch != 0, increment Count
  422 0000007E         ; 
  423 0000007E         ; On return, interrupt condition is cleared
  424 0000007E         ;*****************************************************************
  425 0000007E         PIT_IRQHandler
  426 0000007E         PIT_ISR PROC             {R0-R14}
  427 0000007E         
  428 0000007E 4895            LDR              R0, =RunStopWatch
  429 00000080 7800            LDRB             R0, [R0, #0]
  430 00000082 2800            CMP              R0, #0
  431 00000084 D003            BEQ              ClearInt
  432 00000086         
  433 00000086 4892            LDR              R0, =Count
  434 00000088 6801            LDR              R1, [R0, #0]
  435 0000008A 1C49            ADDS             R1, R1, #1
  436 0000008C 6001            STR              R1, [R0, #0]
  437 0000008E         
  438 0000008E 489D    ClearInt
                               LDR              R0, =PIT_CH0_BASE
  439 00000090 499D            LDR              R1, =PIT_TFLG_TIF_MASK
  440 00000092 60C1            STR              R1, [R0, #PIT_TFLG_OFFSET]
  441 00000094         
  442 00000094 4770            BX               LR
  443 00000096                 ENDP
  444 00000096         
  445 00000096         ;****************************************************************
  446 00000096         ; Subroutine to initialize UART0 



ARM Macro Assembler    Page 14 Embedded LED Game Functions and Drivers


  447 00000096         ; for interrupt-based serial I/O
  448 00000096         ;****************************************************************
  449 00000096         Init_UART0_IRQ
                               PROC             {R0-R14}
  450 00000096 B507            PUSH             {LR, R0-R2}
  451 00000098         
  452 00000098         ; initialize Tx queue
  453 00000098 48A2            LDR              R0, =TxQ
  454 0000009A 49A3            LDR              R1, =TxQRecord
  455 0000009C 2204            MOVS             R2, #QBUFSIZE
  456 0000009E F7FF FFFE       BL               InitQueue
  457 000000A2         
  458 000000A2         ; initialize Rx queue
  459 000000A2 48A2            LDR              R0, =RxQ
  460 000000A4 49A2            LDR              R1, =RxQRecord
  461 000000A6 F7FF FFFE       BL               InitQueue
  462 000000AA         
  463 000000AA         ;Select MCGPLLCLK / 2 as UART0 clock 
  464 000000AA 48A4            LDR              R0,=SIM_SOPT2
  465 000000AC 49A4            LDR              R1,=SIM_SOPT2_UART0SRC_MASK
  466 000000AE 6802            LDR              R2,[R0,#0]
  467 000000B0 438A            BICS             R2,R2,R1
  468 000000B2 49A4            LDR              R1,=SIM_SOPT2_UART0_MCGPLLCLK_DIV2
  469 000000B4 430A            ORRS             R2,R2,R1
  470 000000B6 6002            STR              R2,[R0,#0]
  471 000000B8         
  472 000000B8         ;Enable external connection for UART0
  473 000000B8 48A3            LDR              R0,=SIM_SOPT5
  474 000000BA 49A4            LDR              R1,=SIM_SOPT5_UART0_EXTERN_MASK_CLEAR
  475 000000BC 6802            LDR              R2,[R0,#0]
  476 000000BE 438A            BICS             R2,R2,R1
  477 000000C0 6002            STR              R2,[R0,#0]
  478 000000C2         
  479 000000C2         ;Enable clock for UART0 module
  480 000000C2 48A3            LDR              R0,=SIM_SCGC4
  481 000000C4 49A3            LDR              R1,=SIM_SCGC4_UART0_MASK
  482 000000C6 6802            LDR              R2,[R0,#0]
  483 000000C8 430A            ORRS             R2,R2,R1
  484 000000CA 6002            STR              R2,[R0,#0]
  485 000000CC         
  486 000000CC         ;Enable clock for Port A module
  487 000000CC 4882            LDR              R0,=SIM_SCGC5



ARM Macro Assembler    Page 15 Embedded LED Game Functions and Drivers


  488 000000CE 49A2            LDR              R1,=SIM_SCGC5_PORTA_MASK
  489 000000D0 6802            LDR              R2,[R0,#0]
  490 000000D2 430A            ORRS             R2,R2,R1
  491 000000D4 6002            STR              R2,[R0,#0]
  492 000000D6         
  493 000000D6         ;Connect Port A Pin 1 (PTA1) to UART0 Rx (J1 Pin 02)
  494 000000D6 48A1            LDR              R0,=PORTA_PCR1
  495 000000D8 49A1            LDR              R1,=PORT_PCR_SET_PTA1_UART0_RX
  496 000000DA 6001            STR              R1,[R0,#0]
  497 000000DC         
  498 000000DC         ;Connect Port A Pin 2 (PTA2) to UART0 Tx (J1 Pin 04)
  499 000000DC 48A1            LDR              R0,=PORTA_PCR2
  500 000000DE 49A0            LDR              R1,=PORT_PCR_SET_PTA2_UART0_TX
  501 000000E0 6001            STR              R1,[R0,#0]
  502 000000E2         
  503 000000E2         ; Disable UART0 receiver and transmitter
  504 000000E2 48A1            LDR              R0, =UART0_BASE
  505 000000E4 210C            MOVS             R1, #UART0_C2_T_R
  506 000000E6 78C2            LDRB             R2, [R0, #UART0_C2_OFFSET]
  507 000000E8 438A            BICS             R2, R2, R1
  508 000000EA 70C2            STRB             R2, [R0, #UART0_C2_OFFSET]
  509 000000EC         
  510 000000EC         ; Init NVIC for UART0 interrupts
  511 000000EC 489F            LDR              R0, =UART0_IPR
  512 000000EE         ;LDR    R1, =NVIC_IPR_UART0_MASK
  513 000000EE 4AA0            LDR              R2, =NVIC_IPR_UART0_PRI_3
  514 000000F0 6803            LDR              R3, [R0, #0]
  515 000000F2         ;BICS   R3, R3, R1
  516 000000F2 4313            ORRS             R3, R3, R2
  517 000000F4 6003            STR              R3, [R0, #0]
  518 000000F6         
  519 000000F6         ; clear any pending UART0 pending interrupts
  520 000000F6 489F            LDR              R0, =NVIC_ICPR
  521 000000F8 499F            LDR              R1, =NVIC_ICPR_UART0_MASK
  522 000000FA 6001            STR              R1, [R0, #0]
  523 000000FC         
  524 000000FC         ;unmask UART0 interrupts
  525 000000FC 4885            LDR              R0, =NVIC_ISER
  526 000000FE 499E            LDR              R1, =NVIC_ISER_UART0_MASK
  527 00000100 6001            STR              R1, [R0, #0]
  528 00000102         
  529 00000102         ;Set UART0 for 9600 baud, 8N1 protocol



ARM Macro Assembler    Page 16 Embedded LED Game Functions and Drivers


  530 00000102 4899            LDR              R0, =UART0_BASE
  531 00000104 2101            MOVS             R1,#UART0_BDH_9600
  532 00000106 7001            STRB             R1,[R0,#UART0_BDH_OFFSET]
  533 00000108 2138            MOVS             R1,#UART0_BDL_9600
  534 0000010A 7041            STRB             R1,[R0,#UART0_BDL_OFFSET]
  535 0000010C 2100            MOVS             R1,#UART0_C1_8N1
  536 0000010E 7081            STRB             R1,[R0,#UART0_C1_OFFSET]
  537 00000110 2100            MOVS             R1,#UART0_C3_NO_TXINV
  538 00000112 7181            STRB             R1,[R0,#UART0_C3_OFFSET]
  539 00000114 210F            MOVS             R1,#UART0_C4_NO_MATCH_OSR_16
  540 00000116 7281            STRB             R1,[R0,#UART0_C4_OFFSET]
  541 00000118 2100            MOVS             R1,#UART0_C5_NO_DMA_SSR_SYNC
  542 0000011A 72C1            STRB             R1,[R0,#UART0_C5_OFFSET]
  543 0000011C 211F            MOVS             R1,#UART0_S1_CLEAR_FLAGS
  544 0000011E 7101            STRB             R1,[R0,#UART0_S1_OFFSET]
  545 00000120 21C0            MOVS             R1,#UART0_S2_NO_RXINV_BRK10_NO_LBKDETECT_CLEAR_FLAGS
  546 00000122 7141            STRB             R1,[R0,#UART0_S2_OFFSET]
  547 00000124         
  548 00000124         ;Enable UART0 receiver and transmitter
  549 00000124 212C            MOVS             R1,#UART0_C2_T_RI
  550 00000126 70C1            STRB             R1,[R0,#UART0_C2_OFFSET]
  551 00000128         
  552 00000128 BD07            POP              {R0-R2, PC}
  553 0000012A                 ENDP
  554 0000012A         
  555 0000012A         
  556 0000012A         ;****************************************************************
  557 0000012A         ;   UART0_ISR subroutine
  558 0000012A         ;   Interrupt Service Routine for UART driver
  559 0000012A         ;   
  560 0000012A         ;   Check status of interrupt and handle accordingly
  561 0000012A         ;   Tx Int enabled: write to transmit register
  562 0000012A         ;   Rx Int enabled: enqueue to transmit queue from UART receive register
  563 0000012A         *****************************************************************
  564 0000012A         UART0_IRQHandler
  565 0000012A B672    UART0_ISR
                               CPSID            I           ; mask interrupts
  566 0000012C B50F            PUSH             {R0-R3, LR}
  567 0000012E         
  568 0000012E 488E            LDR              R0, =UART0_BASE
  569 00000130 78C1            LDRB             R1, [R0, #UART0_C2_OFFSET] ; load control register 2
  570 00000132 2280            MOVS             R2, #0x80   ; set bit 7 in R2



ARM Macro Assembler    Page 17 Embedded LED Game Functions and Drivers


  571 00000134 4211            TST              R1, R2      ; test with UART C2 
  572 00000136 D00C            BEQ              RxCheck     ; if not set, check if Rx Enabled
  573 00000138         
  574 00000138 7901            LDRB             R1, [R0, #UART0_S1_OFFSET] ; load serial register
  575 0000013A 4211            TST              R1, R2      ; check bit 7
  576 0000013C D009            BEQ              RxCheck     ; if not set, check if Rx Enabled 
  577 0000013E         
  578 0000013E 497A            LDR              R1, =TxQRecord ; load tx queue record address
  579 00000140 F7FF FFFE       BL               Dequeue
  580 00000144 D202            BCS              DisableTx   ; dequeue was unsuccessful, disable transmit interrupt
  581 00000146         
  582 00000146 4988            LDR              R1, =UART0_BASE ; dequeue was successful
  583 00000148 71C8            STRB             R0, [R1, #UART0_D_OFFSET] ; transmit character stored in R0
  584 0000014A E00C            B                EndISR
  585 0000014C         
  586 0000014C 212C    DisableTx
                               MOVS             R1, #UART0_C2_T_RI
  587 0000014E 70C1            STRB             R1, [R0, #UART0_C2_OFFSET] ; disable tx interrupt 
  588 00000150 E009            B                EndISR      ; and return
  589 00000152         
  590 00000152 4885    RxCheck LDR              R0, =UART0_BASE
  591 00000154 7901            LDRB             R1,[R0,#UART0_S1_OFFSET] ; load Rx status
  592 00000156 2210            MOVS             R2, #0x10   ; set bit 5
  593 00000158 4211            TST              R1, R2      ; check if Rx bit is set
  594 0000015A D004            BEQ              EndISR      ; if not, return
  595 0000015C         
  596 0000015C 79C3            LDRB             R3, [R0, #UART0_D_OFFSET] ; recieve character and store in R3
  597 0000015E 0018            MOVS             R0, R3      ; relocate to R0 for enqueue subroutine
  598 00000160 4973            LDR              R1, =RxQRecord ; load Rx Q record structure address
  599 00000162 F7FF FFFE       BL               Enqueue     ; attempt to enqueue character, or ignore if full    
  600 00000166         
  601 00000166 B662    EndISR  CPSIE            I
  602 00000168 BD0F            POP              {R0-R3, PC}
  603 0000016A         
  604 0000016A         
  605 0000016A         ;****************************************************************
  606 0000016A         ; GetChar Subroutine
  607 0000016A         ; Reads a single character from serial into R0
  608 0000016A         ;****************************************************************
  609 0000016A         GetChar PROC             {R1-R14}
  610 0000016A B506            PUSH             {R1-R2, LR}
  611 0000016C         



ARM Macro Assembler    Page 18 Embedded LED Game Functions and Drivers


  612 0000016C 4970            LDR              R1, =RxQRecord ; load address of Receive Queue record
  613 0000016E B672    DequeueLoop
                               CPSID            I           ; disable all interrupts
  614 00000170 F7FF FFFE       BL               Dequeue     ; dequeue char into R0
  615 00000174 B662            CPSIE            I           ; enable interrupts 
  616 00000176 D2FA            BCS              DequeueLoop ; branch back while unsuccessful        
  617 00000178         
  618 00000178 BD06            POP              {R1-R2, PC}
  619 0000017A                 ENDP
  620 0000017A         
  621 0000017A         ;****************************************************************
  622 0000017A         ; PutChar Subroutine
  623 0000017A         ; Transmits character stored in R0
  624 0000017A         ;****************************************************************
  625 0000017A         PutChar PROC             {R0-R14}
  626 0000017A B503            PUSH             {R0-R1, LR}
  627 0000017C         
  628 0000017C 496A            LDR              R1, =TxQRecord ; load address of Transmit Queue record
  629 0000017E B672    EnqueueLoop
                               CPSID            I           ; mask all interrupts
  630 00000180 F7FF FFFE       BL               Enqueue     ; enqueue character in R0
  631 00000184 B662            CPSIE            I           ; enable interrupts
  632 00000186 D2FA            BCS              EnqueueLoop ; branch back while not successful
  633 00000188         
  634 00000188 4877            LDR              R0, =UART0_BASE
  635 0000018A 21AC            MOVS             R1, #UART0_C2_TI_RI
  636 0000018C 70C1            STRB             R1, [R0, #UART0_C2_OFFSET] ; enable Tx interrupt
  637 0000018E         
  638 0000018E BD03            POP              {R0-R1, PC}
  639 00000190                 ENDP
  640 00000190         
  641 00000190         
  642 00000190         ;****************************************************************
  643 00000190         ;  PutStringSB
  644 00000190         ;
  645 00000190         ;  Displays a null terminated string from memory,
  646 00000190         ;  starting at the address where R0 points, to the
  647 00000190         ;  terminal screen.
  648 00000190         ;
  649 00000190         ;  Parameters
  650 00000190         ;  Input:
  651 00000190         ;  R0: Pointer to source string



ARM Macro Assembler    Page 19 Embedded LED Game Functions and Drivers


  652 00000190         ;  R1: Buffer capacity
  653 00000190         ;
  654 00000190         ;  Modify:
  655 00000190         ;  APSR
  656 00000190         ;
  657 00000190         ;  Uses:
  658 00000190         ;  PutChar
  659 00000190         ;****************************************************************
  660 00000190         PutStringSB
                               PROC             {R0-R14}
  661 00000190 B500            PUSH             {LR}
  662 00000192 B407            PUSH             {R0-R2}
  663 00000194         
  664 00000194 0002            MOVS             R2,R0       ; move address to R2
  665 00000196 7810    PutLoop LDRB             R0,[R2,#0]  ; load byte of string
  666 00000198 2800            CMP              R0,#NULL    ; if character is null,
  667 0000019A D004            BEQ              StringEnd   ; the string has terminated
  668 0000019C F7FF FFFE       BL               PutChar     ; print character to terminal
  669 000001A0 1C52            ADDS             R2,R2,#1    ; increment address
  670 000001A2 1E49            SUBS             R1,R1,#1    ; decrement buffer capacity
  671 000001A4 D1F7            BNE              PutLoop     ; loop back until buffer is empty
  672 000001A6         
  673 000001A6 BC07    StringEnd
                               POP              {R0-R2}
  674 000001A8 BD00            POP              {PC}
  675 000001AA                 ENDP
  676 000001AA         
  677 000001AA         ;****************************************************************
  678 000001AA         ;  InitQueue
  679 000001AA         ;
  680 000001AA         ;  Initialize queue record structure
  681 000001AA         ;  
  682 000001AA         ;  Parameters
  683 000001AA         ;  Input:
  684 000001AA         ;  R0: pointer for empty queue buffer 
  685 000001AA         ;  R1: pointer for new queue record structure
  686 000001AA         ;  R2: queue size
  687 000001AA         ;
  688 000001AA         ;  Modify:
  689 000001AA         ;  APSR
  690 000001AA         ;****************************************************************
  691 000001AA         InitQueue



ARM Macro Assembler    Page 20 Embedded LED Game Functions and Drivers


                               PROC             {R0-R14}
  692 000001AA B40E            PUSH             {R1-R3}
  693 000001AC         
  694 000001AC C101            STM              R1!, {R0}   ; save to IN_PTR, increment address
  695 000001AE C101            STM              R1!, {R0}   ; save to OUT_PTR, increment
  696 000001B0 C101            STM              R1!, {R0}   ; save to BUF_STRT, increment
  697 000001B2 1883            ADDS             R3, R0, R2  ; save queue past address to R3
  698 000001B4 C108            STM              R1!, {R3}   ; save to BUF_PAST
  699 000001B6 700A            STRB             R2, [R1,#0] ; save size to BUF_SIZE
  700 000001B8 2300            MOVS             R3, #NULL
  701 000001BA 704B            STRB             R3, [R1,#1] ; save null to NUM_ENQD
  702 000001BC         
  703 000001BC BC0E            POP              {R1-R3}
  704 000001BE 4770            BX               LR
  705 000001C0                 ENDP
  706 000001C0         
  707 000001C0         ;****************************************************************
  708 000001C0         ;  Dequeue
  709 000001C0         ;
  710 000001C0         ;  Attempts to get a queue from the record.
  711 000001C0         ;  
  712 000001C0         ;  Parameters
  713 000001C0         ;  Input:
  714 000001C0         ;  R1: pointer for queue record structure
  715 000001C0         ;
  716 000001C0         ;  Output:
  717 000001C0         ;  R0: contains the successfully dequeued character
  718 000001C0         ;  PSR C Flag: 0 on success, 1 on failure 
  719 000001C0         ;
  720 000001C0         ;  Modify:
  721 000001C0         ;  APSR
  722 000001C0         ;  R0
  723 000001C0         ;****************************************************************
  724 000001C0         Dequeue PROC             {R1-R14}
  725 000001C0 B41E            PUSH             {R1-R4}
  726 000001C2         
  727 000001C2 7C4A            LDRB             R2, [R1, #NUM_ENQD] ; R2 is NUM_ENQD value
  728 000001C4 2A00            CMP              R2, #0
  729 000001C6 D011            BEQ              EmptyQueue  ; if 0, branch to set carry
  730 000001C8         
  731 000001C8 684B            LDR              R3, [R1, #OUT_PTR] ; R3 is pointer to queue out addr
  732 000001CA 7818            LDRB             R0, [R3, #0] ; put character stored at maddr R3 in R0



ARM Macro Assembler    Page 21 Embedded LED Game Functions and Drivers


  733 000001CC         
  734 000001CC 1C5B            ADDS             R3, R3, #1  ; increment OUT_PTR address
  735 000001CE 68CC            LDR              R4, [R1, #BUF_PAST] ; R4 is BUF_PAST stored address
  736 000001D0 42A3            CMP              R3, R4
  737 000001D2 D100            BNE              SaveOutPtr  ; skip next line if OUT_PTR still within queue limit
  738 000001D4 688B            LDR              R3, [R1, #BUF_STRT] ; set R3 to BUF_STRT addr
  739 000001D6 604B    SaveOutPtr
                               STR              R3, [R1, #OUT_PTR] ; store adjusted out pointer addr to OUT_PTR
  740 000001D8 1E52            SUBS             R2, R2, #1  ; decrement NUM_ENQD
  741 000001DA 744A            STRB             R2, [R1, #NUM_ENQD] ; store new NUM_ENQD
  742 000001DC         
  743 000001DC F3EF 8300       MRS              R3, APSR    ; move APSR to R3
  744 000001E0 22DF            MOVS             R2, #0xDF
  745 000001E2 0612            LSLS             R2, #24     ; set AND mask
  746 000001E4 4013            ANDS             R3, R3, R2  ; clear C flag in APSR
  747 000001E6 F383 8800       MSR              APSR, R3    ; set APSR back
  748 000001EA E006            B                Done
  749 000001EC         
  750 000001EC F3EF 8300 
                       EmptyQueue
                               MRS              R3, APSR    ; move APSR to R3
  751 000001F0 2220            MOVS             R2, #0x20
  752 000001F2 0612            LSLS             R2, #24     ; set AND mask
  753 000001F4 4313            ORRS             R3, R3, R2  ; set C flag in APSR
  754 000001F6 F383 8800       MSR              APSR, R3    ; set APSR back
  755 000001FA         
  756 000001FA BC1E    Done    POP              {R1-R4}
  757 000001FC 4770            BX               LR
  758 000001FE                 ENDP
  759 000001FE         
  760 000001FE         
  761 000001FE         ;****************************************************************
  762 000001FE         ;  Enqueue
  763 000001FE         ;
  764 000001FE         ;  Attempts to insert a new character into the queue.
  765 000001FE         ;  
  766 000001FE         ;  Parameters
  767 000001FE         ;  Input:
  768 000001FE         ;  R0: character byte to enqueue
  769 000001FE         ;  R1: pointer for queue record structure
  770 000001FE         ;
  771 000001FE         ;  Output:



ARM Macro Assembler    Page 22 Embedded LED Game Functions and Drivers


  772 000001FE         ;  PSR C Flag: 0 on success, 1 on failure 
  773 000001FE         ;
  774 000001FE         ;  Modify:
  775 000001FE         ;  APSR
  776 000001FE         ;****************************************************************
  777 000001FE         Enqueue PROC             {R1-R14}
  778 000001FE B41F            PUSH             {R0-R4}
  779 00000200         
  780 00000200 7C4A            LDRB             R2, [R1, #NUM_ENQD] ; R2 is NUM_ENQD value
  781 00000202 7C0B            LDRB             R3, [R1, #BUF_SIZE] ; R3 is BUF_SIZE
  782 00000204 429A            CMP              R2, R3
  783 00000206 DA11            BGE              QueueFull   ; if 0, branch to set carry
  784 00000208         
  785 00000208 680B            LDR              R3, [R1, #IN_PTR] ; R3 is pointer to queue in addr
  786 0000020A 7018            STRB             R0, [R3, #0] ; enqueue value stored in R0
  787 0000020C         
  788 0000020C 1C5B            ADDS             R3, R3, #1  ; increment IN_PTR address
  789 0000020E 68CC            LDR              R4, [R1, #BUF_PAST] ; R4 is BUF_PAST stored address
  790 00000210 42A3            CMP              R3, R4
  791 00000212 D100            BNE              SaveInPtr   ; Skip next line if IN_PTR still within queue buffer
  792 00000214 688B            LDR              R3, [R1, #BUF_STRT] ; set R3 to BUF_STRT addr
  793 00000216 600B    SaveInPtr
                               STR              R3, [R1, #IN_PTR] ; store adjusted in pointer addr to IN_PTR
  794 00000218 1C52            ADDS             R2, R2, #1  ; increment NUM_ENQD
  795 0000021A 744A            STRB             R2, [R1, #NUM_ENQD] ; store new NUM_ENQD
  796 0000021C         
  797 0000021C F3EF 8300       MRS              R3, APSR    ; move APSR to R3
  798 00000220 22DF            MOVS             R2, #0xDF
  799 00000222 0612            LSLS             R2, #24     ; set AND mask
  800 00000224 4013            ANDS             R3, R3, R2  ; clear C flag in APSR
  801 00000226 F383 8800       MSR              APSR, R3    ; set APSR back
  802 0000022A E006            B                Finish
  803 0000022C         
  804 0000022C F3EF 8300 
                       QueueFull
                               MRS              R3, APSR    ; move APSR to R3
  805 00000230 2220            MOVS             R2, #0x20
  806 00000232 0612            LSLS             R2, #24     ; set AND mask
  807 00000234 4313            ORRS             R3, R3, R2  ; set C flag in APSR
  808 00000236 F383 8800       MSR              APSR, R3    ; set APSR back
  809 0000023A         
  810 0000023A BC1F    Finish  POP              {R0-R4}



ARM Macro Assembler    Page 23 Embedded LED Game Functions and Drivers


  811 0000023C 4770            BX               LR
  812 0000023E                 ENDP
  813 0000023E         
  814 0000023E         
  815 0000023E         ;****************************************************************
  816 0000023E         ;  PutNumHex
  817 0000023E         ;
  818 0000023E         ;  Prints to the terminal screen the text
  819 0000023E         ;  hexadecimal representation of the unsigned word in R0
  820 0000023E         ;  
  821 0000023E         ;  Parameters
  822 0000023E         ;  Input:
  823 0000023E         ;  R0: Unsigned number in hexadecimal
  824 0000023E         ;
  825 0000023E         ;  Modify:
  826 0000023E         ;  APSR
  827 0000023E         ;  
  828 0000023E         ;  Uses:
  829 0000023E         ;  PutChar
  830 0000023E         ;****************************************************************
  831 0000023E         PutNumHex
                               PROC             {R0-R14}
  832 0000023E B50F            PUSH             {R0-R3, LR}
  833 00000240         
  834 00000240 220F            MOVS             R2, #0x0F   ; init mask in R2
  835 00000242 2300            MOVS             R3, #0      ; init counter
  836 00000244 2B08    Loop    CMP              R3, #8      ; compare counter to limit, 8
  837 00000246 D009            BEQ              PrintOut    ; Branch to print chars if limit reached
  838 00000248 0001            MOVS             R1, R0      ; move R0 to R1 for ANDS
  839 0000024A 4011            ANDS             R1, R1, R2  ; put 4 MSBs in R1
  840 0000024C 3130            ADDS             R1, R1, #0x30 ; Add 0x30 to put in number range
  841 0000024E 2939            CMP              R1, #0x39   ; Check if value in number or letter range
  842 00000250 DD00            BLE              Number      ; if < 0, skip the next line
  843 00000252 1DC9            ADDS             R1, R1, #0x07 ; if > 0, is letter, put character into letter range
  844 00000254 B402    Number  PUSH             {R1}        ; push to stack
  845 00000256         
  846 00000256 0900            LSRS             R0, R0, #4  ; shift number over for next 4 MSBs
  847 00000258 1C5B            ADDS             R3, R3, #1  ; increment counter
  848 0000025A E7F3            B                Loop
  849 0000025C         
  850 0000025C BC01    PrintOut
                               POP              {R0}



ARM Macro Assembler    Page 24 Embedded LED Game Functions and Drivers


  851 0000025E F7FF FFFE       BL               PutChar     ; print the value   
  852 00000262 1E5B            SUBS             R3, R3, #1  ; increment counter
  853 00000264 D1FA            BNE              PrintOut
  854 00000266         
  855 00000266 BD0F    RestoreRegs
                               POP              {R0-R3, PC}
  856 00000268                 ENDP
  857 00000268         
  858 00000268         
  859 00000268         ;****************************************************************
  860 00000268         ;  PutNumUB
  861 00000268         ;
  862 00000268         ;  Prints to the terminal screen the text
  863 00000268         ;  decimal representation of the unsigned byte in R0
  864 00000268         ;  
  865 00000268         ;  Parameters
  866 00000268         ;  Input:
  867 00000268         ;  R0: Unsigned number in hexadecimal
  868 00000268         ;
  869 00000268         ;  Modify:
  870 00000268         ;  APSR
  871 00000268         ;  
  872 00000268         ;  Uses:
  873 00000268         ;  PutNumU
  874 00000268         ;****************************************************************
  875 00000268         PutNumUB
                               PROC             {R0-R14}
  876 00000268 B503            PUSH             {R0-R1, LR}
  877 0000026A         
  878 0000026A 21FF            MOVS             R1, #0xFF
  879 0000026C 4008            ANDS             R0, R0, R1
  880 0000026E F7FF FFFE       BL               PutNumU
  881 00000272         
  882 00000272 BD03            POP              {R0-R1, PC}
  883 00000274                 ENDP
  884 00000274         
  885 00000274         
  886 00000274         ;****************************************************************
  887 00000274         ;  PutNumU
  888 00000274         ;
  889 00000274         ;  Prints to the terminal screen the text
  890 00000274         ;  decimal representation of the number in R0



ARM Macro Assembler    Page 25 Embedded LED Game Functions and Drivers


  891 00000274         ;  
  892 00000274         ;  Parameters
  893 00000274         ;  Input:
  894 00000274         ;  R0: Unsigned number in hexadecimal
  895 00000274         ;
  896 00000274         ;  Modify:
  897 00000274         ;  APSR
  898 00000274         ;  
  899 00000274         ;  Uses:
  900 00000274         ;  PutChar
  901 00000274         ;  DivU
  902 00000274         ;****************************************************************
  903 00000274         PutNumU PROC             {R0-R14}
  904 00000274 B500            PUSH             {LR}
  905 00000276 B40F            PUSH             {R0-R3}
  906 00000278         
  907 00000278 2300            MOVS             R3,#0       ; init counter
  908 0000027A 0001    DivTen  MOVS             R1,R0       ; move R0 to R1 
  909 0000027C 200A            MOVS             R0,#0x0A    ; put 10 in R0
  910 0000027E F7FF FFFE       BL               DIVU        ; R0 holds quotient, R1 holds remainder
  911 00000282 3130            ADDS             R1,R1,#0x30 ; put number into ascii range
  912 00000284 B402            PUSH             {R1}        ; push remainder onto stack
  913 00000286 1C5B            ADDS             R3,R3,#1    ; increment counter
  914 00000288 2800            CMP              R0,#0
  915 0000028A D000            BEQ              PrintNum    ; when quotient = 0, str is fully converted
  916 0000028C E7F5            B                DivTen
  917 0000028E         
  918 0000028E BC01    PrintNum
                               POP              {R0}        ; pop the latest remainder into R0
  919 00000290 F7FF FFFE       BL               PutChar     ; send to terminal
  920 00000294 1E5B            SUBS             R3,R3,#1    ; subtract counter
  921 00000296 D1FA            BNE              PrintNum    ; loop until counter = 0
  922 00000298         
  923 00000298 BC0F            POP              {R0-R3}
  924 0000029A BD00            POP              {PC}
  925 0000029C                 ENDP
  926 0000029C         
  927 0000029C         
  928 0000029C         ;---------------------------------------------------------------
  929 0000029C         ; DIVISION SUBROUTINE
  930 0000029C         ;  input:  R0 = Divisor
  931 0000029C         ;      R1 = Dividend



ARM Macro Assembler    Page 26 Embedded LED Game Functions and Drivers


  932 0000029C         ;  operation: R1/R0
  933 0000029C         ;  returns: R0 = Quotient
  934 0000029C         ;     R1 = Remainder
  935 0000029C         ;---------------------------------------------------------------
  936 0000029C         
  937 0000029C         DIVU    PROC             {R2-R14},{}
  938 0000029C B40C            PUSH             {R2-R3}
  939 0000029E         
  940 0000029E 2220            MOVS             R2, #0x20   ; Store mask in R2
  941 000002A0 0612            LSLS             R2, #24     ; Left shift to mask 2nd MSB (carry)
  942 000002A2 F3EF 8300       MRS              R3, APSR    ; Move APSR to R3
  943 000002A6 431A            ORRS             R2, R2, R3  ; Or APSR to set C
  944 000002A8 F382 8800       MSR              APSR, R2    ; Set APSR back 
  945 000002AC         
  946 000002AC 2800            CMP              R0, #0      ; if R0 is 0
  947 000002AE D00B            BEQ              Div0        ; Jump to divide by 0
  948 000002B0         
  949 000002B0 2200            MOVS             R2, #0
  950 000002B2 4281    DivL    CMP              R1, R0      ; while R1 > R0
  951 000002B4 D302            BLO              DivF
  952 000002B6 1A09            SUBS             R1, R1, R0  ; R1 = R1 - R0
  953 000002B8 1C52            ADDS             R2, R2, #1  ; Add 1 to remainder
  954 000002BA E7FA            B                DivL
  955 000002BC         
  956 000002BC F3EF 8300 
                       DivF    MRS              R3, APSR    ; Move APSR to R3
  957 000002C0 4393            BICS             R3, R3, R2  ; Clear carry
  958 000002C2 F383 8800       MSR              APSR, R3    ; Move APSR back
  959 000002C6 E000            B                Fin         ; Skip Div0
  960 000002C8         
  961 000002C8 2200    Div0    MOVS             R2, #0      ; Clear mask in R2
  962 000002CA         
  963 000002CA 0010    Fin     MOVS             R0, R2      ; Move quotient to R0
  964 000002CC BC0C            POP              {R2-R3}     ; Pop stored stack registers
  965 000002CE 4770            BX               LR          ; Return
  966 000002D0                 ENDP
  967 000002D0         
  968 000002D0         ;>>>>>   end subroutine code <<<<<
  969 000002D0                 ALIGN
  970 000002D0         
  971 000002D0         ;****************************************************************
  972 000002D0         ;Constants



ARM Macro Assembler    Page 27 Embedded LED Game Functions and Drivers


  973 000002D0 00000000 
              00000000 
              40048038 
              00003000 
              4004D000 
              01000100 
              4004C000 
              F80FF0C0 
              00000020 
              F80FF100 
              20000000 
              4004803C 
              00800000 
              40037100 
              00000001 
              E000E414 
              00C00000 
              E000E100 
              00400000 
              40037000 
              0003A97F 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              40048004 
              0C000000 
              04010000 
              40048010 
              00010007 
              40048034 
              00000400 
              00000200 
              40049004 
              01000200 
              40049008 
              4006A000 
              E000E40C 
              000000C0 
              E000E280 



ARM Macro Assembler    Page 28 Embedded LED Game Functions and Drivers


              00001000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             MyConst,DATA,READONLY
  974 00000000         ;>>>>> begin constants here <<<<<
  975 00000000         
  976 00000000         ;>>>>>   end constants here <<<<<
  977 00000000                 ALIGN
  978 00000000         ;****************************************************************
  979 00000000         ;Variables
  980 00000000                 AREA             MyData,DATA,READWRITE
  981 00000000         ;>>>>> begin variables here <<<<<
  982 00000000 00 00 00 
              00       TxQ     SPACE            QBUFSIZE
  983 00000004 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 TxQRecord
                               SPACE            QRECSIZE
  984 00000016 00 00           ALIGN
  985 00000018 00 00 00 
              00       RxQ     SPACE            QBUFSIZE
  986 0000001C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 RxQRecord
                               SPACE            QRECSIZE
  987 0000002E 00 00           ALIGN
  988 00000030 00 00 00 
              00       MainQ   SPACE            QBUFSIZE
  989 00000034 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 MainQRecord
                               SPACE            QRECSIZE



ARM Macro Assembler    Page 29 Embedded LED Game Functions and Drivers


  990 00000046 00 00           ALIGN
  991 00000048 00      RunStopWatch
                               SPACE            1
  992 00000049 00 00 00        ALIGN
  993 0000004C 00 00 00 
              00       Count   SPACE            4
  994 00000050         ;>>>>>   end variables here <<<<<
  995 00000050                 ALIGN
  996 00000050                 END
Command Line: --debug --length=49 --width=120 --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=interwork --depend=.\objects\
lab12.d -o.\objects\lab12.o -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\
Keil\Kinetis_KLxx_DFP\1.14.0\Device\Include --predefine="__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" --predef
ine="MKL46Z256xxx4 SETA 1" --list=.\listings\lab12.lst lab12.s
